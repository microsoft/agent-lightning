name: Issue Comment

on:
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  issues: write

jobs:
  reopen:
    # Only run for comments on pull requests AND when the comment starts with "/ci"
    if: >
      github.event.issue.pull_request != null &&
      startsWith(github.event.comment.body, '/ci')
    runs-on: ubuntu-latest
    steps:
      - name: Guardrail — allow only members/collaborators
        uses: actions/github-script@v7
        with:
          script: |
            const allowed = ['MEMBER','OWNER','COLLABORATOR'];
            const assoc = context.payload.comment.author_association;
            if (!allowed.includes(assoc)) {
              core.notice(`Ignoring /ci from ${context.payload.comment.user.login} (author_association=${assoc}).`);
              core.setOutput('skip', 'true');
            }
          result-encoding: string
        id: guard

      - name: Close and Reopen PR
        if: steps.guard.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.issue.number;

            // Fetch current PR state
            const { data: pr } = await github.pulls.get({ owner, repo, pull_number });

            // Add a quick reaction so folks know we saw it
            try {
              await github.reactions.createForIssueComment({
                owner, repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'
              });
            } catch (e) {
              core.info('Could not add reaction (likely due to permissions). Continuing.');
            }

            // If the PR is open, close it first to ensure "reopened" fires reliably
            if (pr.state === 'open') {
              core.info(`Closing PR #${pull_number}...`);
              await github.issues.update({ owner, repo, issue_number: pull_number, state: 'closed' });
              // small pause to let events settle
              await new Promise(r => setTimeout(r, 1500));
            } else {
              core.info(`PR #${pull_number} is already closed; will reopen it.`);
            }

            core.info(`Reopening PR #${pull_number} to trigger CI (pull_request.reopened)…`);
            await github.issues.update({ owner, repo, issue_number: pull_number, state: 'open' });

            core.info('Done. CI should trigger on the "reopened" event.');

      - name: Acknowledge in thread (optional)
        if: steps.guard.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.issue.number;
            await github.issues.createComment({
              owner, repo, issue_number,
              body: `✅ CI retrigger requested by @${context.payload.comment.user.login}. Closed & reopened the PR to fire \`pull_request: reopened\`.`
            });
