name: Badge - Examples

on:
  workflow_run:
    workflows:
      - Examples - Calc-X
      - Examples - Spider
      - Examples - APO
      - Examples - Unsloth
    types: [completed]

permissions:
  actions: read
  contents: read

jobs:
  badge:
    runs-on: ubuntu-latest
    steps:
      - name: Skip non-main runs
        if: ${{ github.event.workflow_run.head_branch != 'main' }}
        run: echo "Skipping because branch '${{ github.event.workflow_run.head_branch }}' is not main."

      - name: Verify stable variants
        if: ${{ github.event.workflow_run.head_branch == 'main' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dependencies = [
              { workflow: 'examples-calc-x.yml', label: 'examples-calc-x.stable', variants: ['stable'] },
              { workflow: 'examples-spider.yml', label: 'examples-spider.stable', variants: ['stable'] },
              { workflow: 'examples-apo.yml', label: 'examples-apo.stable', variants: ['stable'] },
              { workflow: 'examples-unsloth.yml', label: 'examples-unsloth.stable', variants: ['stable'] },
            ];

            const failures = [];

            for (const dep of dependencies) {
              const runsResponse = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: dep.workflow,
                branch: 'main',
                status: 'completed',
                per_page: 1,
              });

              const run = runsResponse.data.workflow_runs?.[0];

              if (!run) {
                failures.push(`No completed run for ${dep.label}`);
                continue;
              }

              const attempt = run.run_attempt ?? 1;
              const { data } = await github.rest.actions.listJobsForWorkflowRunAttempt({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id,
                attempt_number: attempt,
                per_page: 100,
              });

              const jobs = data.jobs ?? [];

              for (const variant of dep.variants) {
                const job = jobs.find(job => job.name.toLowerCase().includes(`, ${variant.toLowerCase()})`));
                if (!job) {
                  failures.push(`Missing job for ${dep.label} (${variant})`);
                  continue;
                }
                core.info(`[${dep.label}] ${job.name} => ${job.conclusion}`);
                if (job.conclusion !== 'success') {
                  failures.push(`${dep.label} (${job.name}) concluded ${job.conclusion}`);
                }
              }
            }

            if (failures.length) {
              core.setFailed(failures.join(' | '));
            } else {
              core.info('All stable variants succeeded.');
            }
